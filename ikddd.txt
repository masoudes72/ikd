// ==UserScript==
// @name         irankhodrodisel_v3.7.0 (Unified Settings)
// @namespace    http://tampermonkey.net/
// @version      2025-06-12.13
// @description  Unified settings panel with collapsible mobile input and integrated captcha solver options.
// @author       You (Modified by AI)
// @match        https://esale.ikd.ir/*
// @icon         https://esale.ikd.ir/logo.png
// @grant        GM_addStyle
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_info
// @require      https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js
// ==/UserScript==

(function() {
    'use strict';

    // =====================================================================================
    // --- ⚙️ CONFIGURATION & CONSTANTS ---
    // =====================================================================================
    const CONFIG = {
        localStorageTokenKey: 'SaleInternet',
        smsTimestampKey: 'ikdBotSmsTimestamp',
        apiBaseUrl: 'https://esale.ikd.ir/api',
        relayServerBaseUrl: 'https://smsikd.sipa-solver.shop',
        remoteSolverUrl1: 'https://ikd.sipa-solver.shop/solve_captcha',
        remoteSolverUrl2: 'https://oikd.sipa-solver.shop/solve',
        defaultMobileNumber: '09000000000', // This is now a fallback
        smsCooldownMinutes: 5,
        apiRetryDelayMs: 4000,
        searchPollingIntervalMs: 2500,
        smsRelayPollingIntervalMs: 1500,
        failedSubmitDelayMs: 5000,
        logoImageUrl: 'https://esale.ikd.ir/logo.png',
        closeIconText: '&times;',
        triggerButtonText: '[BOT] فعال‌سازی ربات خرید',
        popupSearchPlaceholder: 'نام دقیق محصول مورد نظر',
        startContinuousSearchText: 'شروع جستجوی مستمر',
        stopContinuousSearchText: 'توقف جستجو',
        manualSmsButtonText: 'کد SMS دستی',
        manualSmsCooldownText: 'صبر کنید: {timeLeft}',
        saveMobileButtonText: 'ذخیره',
        updateButtonText: 'به‌روزرسانی',
    };
    const API_ENDPOINTS_IKD = {
        getSaleProjects: `${CONFIG.apiBaseUrl}/sales/getSaleProjects`,
        getCaptchaOrder: `${CONFIG.apiBaseUrl}/esales/getCaptchaOrder`,
        readSefareshInfo: `${CONFIG.apiBaseUrl}/esales/readSefareshInfo`,
        sendSmsOrder: `${CONFIG.apiBaseUrl}/users/sendSmsOrder`,
        addSefaresh: `${CONFIG.apiBaseUrl}/esales/addSefaresh`,
    };
    // =====================================================================================
    // --- 🖼️ GLOBAL STATE & UI ELEMENTS ---
    // =====================================================================================
    let authToken = "";
    let uiElements = {};
    let mobileNumber = CONFIG.defaultMobileNumber;
    let currentOrderData = { captchaAutoFilled: false, smsAutoFilled: false, isSubmittingOrderProcess: false, captchaToken: null, selectedProject: null, captchaCode: null, smsCode: null, stopProcess: false, orderDetails: null };
    let smsRelayPollingTimeoutId = null;
    let mainProcessTimeoutId = null;
    let smsCooldownInterval = null;
    let productSearchPollingTimeoutId = null;
    let isContinuousSearchingProduct = false;
    let selectedSolver = 'solver-2';

    const getSimulatedHeaders = (refererPage = 'products') => ({
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'en-US,en;q=0.5',
        'authorization': `Bearer ${authToken}`,
        'Connection': 'keep-alive',
        'Origin': 'https://esale.ikd.ir',
        'Referer': `${window.location.origin}/${refererPage}`,
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'same-origin',
        'User-Agent': navigator.userAgent,
        'Priority': 'u=0',
    });


    window.onerror = function(message, source, lineno, colno, error) {
        log('error', 'یک خطای پیش‌بینی نشده در سطح اسکریپت رخ داد!', { message, source, lineno, colno, error });
        if (uiElements.systemMessagesContent) {
            displayMessage('خطای بحرانی! تلاش برای راه‌اندازی مجدد...', 'error');
        }
        setTimeout(() => {
            if (currentOrderData.selectedProject && !currentOrderData.isSubmittingOrderProcess) {
                 startOrderProcess();
            }
        }, 8000);
        return true;
    };

    // =====================================================================================
    // --- 🛠️ UTILITY FUNCTIONS ---
    // =====================================================================================
    function log(type, message, data) {
        const prefix = { info: '[INFO]', error: '[ERROR]', success: '[موفق]', warn: '[هشدار]', debug: '[DEBUG]' }[type] || '[LOG]';
        if (data !== undefined) console[type === 'error' ? 'error' : 'log'](`${prefix} ${message}`, data);
        else console[type === 'error' ? 'error' : 'log'](`${prefix} ${message}`);
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
            const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16).toUpperCase();
        });
    }
    function handleApiError(error, apiName) {
        const msg = error.response ? (error.response.data?.message || JSON.stringify(error.response.data) || error.message) : error.message;
        log('error', `${apiName} API Fail:`, msg);
        return { success: false, data: null, error: msg || "Unknown API error" };
    }
    function captchaDataToFile(captchaData) {
        if (captchaData.dataImage) {
            return base64ToFile(`data:image/png;base64,${captchaData.dataImage}`, "captcha.png");
        } else if (captchaData.capchaData && captchaData.capchaData.toLowerCase().includes("<svg")) {
            return new File([captchaData.capchaData], 'captcha.svg', {type: 'image/svg+xml'});
        }
        return null;
    }
    function base64ToFile(base64String, filename) {
        try {
            if(!base64String || !base64String.startsWith('data:')) return null;
            const parts = base64String.split(',');
            if (parts.length < 2) return null;
            const byteCharacters = atob(parts[1]);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) byteNumbers[i] = byteCharacters.charCodeAt(i);
            const byteArray = new Uint8Array(byteNumbers);
            return new File([byteArray], filename, { type: parts[0].substring(parts[0].indexOf(':') + 1, parts[0].indexOf(';')) || 'image/png' });
        } catch (e) {
            log('error','خطا در تبدیل Base64 به فایل.', e);
            return null;
        }
    }

    // =====================================================================================
    // --- 📞 API CALL FUNCTIONS ---
    // =====================================================================================
    async function getSaleProjectsFromIKD() {
        await sleep(200);
        try {
            const headers = { ...getSimulatedHeaders(), 'Content-Type': 'application/json' };
            const response = await axios.post(API_ENDPOINTS_IKD.getSaleProjects, {}, { headers });
            return { success: true, data: response.data };
        } catch (error) {
            return handleApiError(error, 'getSaleProjectsFromIKD');
        }
    }

    async function getOrderDetailsFromIKD(projectData) {
        await sleep(200);
        const payload = { idDueDeliverProg: projectData.IdDueDeliverProg };
        try {
            const headers = { ...getSimulatedHeaders('addOrder'), 'Content-Type': 'application/json;   charset=UTF-8' };
            const response = await axios.post(API_ENDPOINTS_IKD.readSefareshInfo, payload, { headers, withCredentials: true });
            if (response.data && response.data.statusResult === 0 && response.data.rows?.length) {
                const randomRow = response.data.rows[Math.floor(Math.random() * response.data.rows.length)];
                return { success: true, data: { agencyId: response.data.idAgencyCode, selectedUsage: response.data.usages?.[0]?.value || null, selectedColor: response.data.colors?.[0]?.value || null, agency: randomRow, } };
            }
            return { success: false, error: response.data.message || 'اطلاعات نمایندگی دریافت نشد.' };
        } catch (error) {
            return handleApiError(error, 'getOrderDetailsFromIKD');
        }
    }

    async function getCaptchaOrderFromIKD(cardId) {
        await sleep(150);
        const payload = { "captchaName": "Order", "token": "", "captchaId": parseInt(cardId), "apiId": "06290E83-E12E-4910-9C12-942F78131CE6" };
        try {
             const headers = { ...getSimulatedHeaders('addOrder'), 'Content-Type': 'application/json;   charset=UTF-8' };
            const response = await axios.post(API_ENDPOINTS_IKD.getCaptchaOrder, payload, { headers, withCredentials: true });
            if (response.data && response.data.statusResult === 0 && (response.data.dataImage || response.data.capchaData)) {
                currentOrderData.captchaToken = response.data.token;
                return { success: true, data: response.data };
            }
            return { success: false, error: response.data.message || "پاسخ سرور فاقد تصویر کپچا بود." };
        } catch (error) {
            return handleApiError(error, 'getCaptchaOrderFromIKD');
        }
    }

    async function requestSmsFromIKD() {
        await sleep(250);
        const lastSmsTime = parseInt(localStorage.getItem(CONFIG.smsTimestampKey) || '0');
        const now = Date.now();
        const cooldownMs = CONFIG.smsCooldownMinutes * 60 * 1000;
        if (now - lastSmsTime < cooldownMs) {
            const timeLeftMs = cooldownMs - (now - lastSmsTime);
            return { success: false, error: `محدودیت زمانی ارسال SMS.`, isCooldown: true, timeLeftMs };
        }
        const payload = { smsType: "Order", systemCode: "SaleInternet" };
        try {
            const headers = { ...getSimulatedHeaders('addOrder'), 'Content-Type': 'application/json;   charset=UTF-8' };
            const response = await axios.post(API_ENDPOINTS_IKD.sendSmsOrder, payload, { headers, withCredentials: true });
            if (response.data && response.data.statusResult === 0) {
                const successTime = Date.now();
                localStorage.setItem(CONFIG.smsTimestampKey, successTime);
                return { success: true };
            }
            return { success: false, error: response.data.message || "خطا در ارسال SMS" };
        } catch (error) {
            return handleApiError(error, 'requestSmsFromIKD');
        }
    }

    async function addOrderToIKD(orderPayload) {
        await sleep(500);
        try {
            const headers = { ...getSimulatedHeaders('addOrder'), 'Content-Type': 'application/json; charset=UTF-8' };
            const r = await axios.post(API_ENDPOINTS_IKD.addSefaresh, orderPayload, { headers, withCredentials: true });
            if (r.data && r.data.identity) {
                const f = document.createElement('form');
                f.method = 'POST';
                f.action = 'https://ikc.shaparak.ir/iuiv3/IPG/Index';
                const i = document.createElement('input');
                i.type = 'hidden';
                i.name = 'tokenIdentity';
                i.value = r.data.identity;
                f.appendChild(i);
                document.body.appendChild(f);
                f.submit();
                return { success: true };
            } else {
                return { success: false, error: r.data.message || "خطا در ثبت نهایی سفارش" };
            }
        } catch (e) {
            return handleApiError(e, 'addOrderToIKD');
        }
    }

    async function solveCaptcha(captchaData) {
        const captchaFile = captchaDataToFile(captchaData);
        if (!captchaFile) {
            return { success: false, error: "فایل کپچا برای حل موجود نیست." };
        }

        const solvers = [];
        if (selectedSolver === 'solver-1' && CONFIG.remoteSolverUrl1) {
            solvers.push({ name: 'سرور ۱ (عمومی)', url: CONFIG.remoteSolverUrl1 });
        } else if (selectedSolver === 'solver-2' && CONFIG.remoteSolverUrl2) {
            solvers.push({ name: 'سرور ۲ (شخصی)', url: CONFIG.remoteSolverUrl2 });
        }

        if (solvers.length === 0) {
             return { success: false, error: "حل‌کننده انتخاب شده در دسترس نیست یا تنظیم نشده است." };
        }

        for (const solver of solvers) {
            try {
                log('info', `تلاش برای حل کپچا با سرور: ${solver.name}`);
                const formData = new FormData();
                formData.append('file', captchaFile);

                const response = await axios.post(solver.url, formData, {
                    headers: { 'Content-Type': 'multipart/form-data' },
                    timeout: 15000
                });

                const answer = response.data?.answer || response.data?.solved_value || response.data?.solve || (typeof response.data === 'string' && response.data);

                if (answer) {
                    log('success', `حل‌کننده ${solver.name} پاسخ داد: ${answer}`);
                    return { success: true, answer: String(answer) };
                } else {
                    log('warn', `پاسخ از حل‌کننده ${solver.name} نامعتبر است.`, response.data);
                }
            } catch (e) {
                log('warn', `حل‌کننده ${solver.name} با خطا مواجه شد.`);
            }
        }

        return { success: false, error: 'هیچ‌کدام از حل‌کننده‌ها موفق به پاسخ نشدند.' };
    }


    async function getLastSmsFromRelayServer() {
        await sleep(100);
        try {
            const response = await axios.get(`${CONFIG.relayServerBaseUrl}/get-sms/${mobileNumber}`);
            if (response.data && response.data.success && response.data.smsCode) {
                return { success: true, sms: response.data.smsCode };
            }
            return { success: false, error: response.data.message || 'کد SMS یافت نشد.' };
        } catch (error) {
            if (error.response && error.response.status === 404) return { success: false, error: 'کد SMS هنوز موجود نیست.' };
            return handleApiError(error, 'getLastSmsFromRelayServer');
        }
    }

    // =====================================================================================
    // --- 🎨 UI FUNCTIONS ---
    // =====================================================================================
    function createTriggerButton() {
        if (document.getElementById('ikd-bot-trigger-btn')) return;
        const b=document.createElement('button');b.id='ikd-bot-trigger-btn';b.textContent=CONFIG.triggerButtonText;document.body.appendChild(b);b.addEventListener('click',()=>{if(uiElements.mainPopup){uiElements.mainPopup.style.display='flex';resetPopupUI();}});
    }
    function resetPopupUI() {
        if (isContinuousSearchingProduct) stopContinuousProductSearch();
        stopMainProcess();
        currentOrderData = { captchaAutoFilled: false, smsAutoFilled: false, isSubmittingOrderProcess: false, selectedProject: null, captchaToken: null, captchaCode: null, smsCode: null, stopProcess: false, orderDetails: null };
        if (uiElements.initialSearchSection) uiElements.initialSearchSection.style.display = 'flex';
        if (uiElements.searchResultsSection) uiElements.searchResultsSection.style.display = 'none';
        if (uiElements.captchaSmsContainer) uiElements.captchaSmsContainer.style.display = 'none';
        if (uiElements.systemMessagesContent) uiElements.systemMessagesContent.innerHTML = `<p class="no-message-exist">برای شروع، مدل خودرو را وارد و جستجو کنید.<br>ربات از شماره <strong>${mobileNumber}</strong> برای SMS استفاده خواهد کرد.</p>`;
        if (uiElements.modelSearchInput) uiElements.modelSearchInput.value = '';
        if (uiElements.captchaInput) uiElements.captchaInput.value = '';
        if (uiElements.smsInput) uiElements.smsInput.value = '';
        if (uiElements.startSearchButton) { uiElements.startSearchButton.disabled = false; uiElements.startSearchButton.textContent = CONFIG.startContinuousSearchText; }
        if (uiElements.submitOrderButton) uiElements.submitOrderButton.disabled = true;
        // Hide mobile input panel on reset
        if (uiElements.mobileInputPanel) uiElements.mobileInputPanel.style.display = 'none';
        checkSmsCooldownOnLoad();
    }
    function createMainPopupUI() {
        if (document.getElementById('ikd-main-process-popup')) return;
        const popup = document.createElement('div');
        popup.classList.add('popup');
        popup.id = 'ikd-main-process-popup';
        popup.style.display = 'none';
        popup.innerHTML = `
        <div class="popup-content-wrapper">
            <div class="popup-header">
                <div class="popup-header-left">
                    <img src="${CONFIG.logoImageUrl}" alt="لوگو" class="popup-logo"/>
                    <h2 class="popup-title">ربات خرید ایران‌خودرو دیزل</h2>
                </div>
                <div class="popup-header-right">
                     <div class="header-info-item">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-phone-fill" viewBox="0 0 16 16"><path d="M3 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V2zm6 11a1 1 0 1 0-2 0 1 1 0 0 0 2 0z"/></svg>
                        <span id="user-display-name">${mobileNumber}</span>
                    </div>
                    <div class="header-info-item">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clock-fill" viewBox="0 0 16 16"><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71z"/></svg>
                        <div id="live-clock" class="popup-clock">00:00</div>
                    </div>
                    <button class="popup-close-btn" title="بستن">${CONFIG.closeIconText}</button>
                </div>
            </div>
            <div class="popup-main-content">
                <!-- Unified Settings Section -->
                <section class="popup-section settings-section">
                    <h3 class="section-title">⚙️ تنظیمات و کنترل</h3>
                    <div class="main-settings-controls">
                        <button class="action-btn secondary-btn" id="toggle-mobile-panel-btn">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-phone-vibrate" viewBox="0 0 16 16"><path d="M10 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h4zM6 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H6z"/><path d="M8 12a1 1 0 1 0 0-2 1 1 0 0 0 0 2zM1.586 6.414a.5.5 0 0 1 0 .708L.293 8.414a.5.5 0 0 1-.707-.707l1.293-1.293a.5.5 0 0 1 .707 0zm13.52.707a.5.5 0 0 1-.707 0l-1.293-1.293a.5.5 0 0 1 0-.708l1.293-1.293a.5.5 0 0 1 .707.707L15.106 7.12zM2 9.5a.5.5 0 0 1 .5-.5h.5a.5.5 0 0 1 0 1H2.5a.5.5 0 0 1-.5-.5zm12 0a.5.5 0 0 1 .5-.5h.5a.5.5 0 0 1 0 1h-.5a.5.5 0 0 1-.5-.5z"/></svg>
                            <span>شماره موبایل</span>
                        </button>
                        <button class="action-btn secondary-btn" id="check-update-btn">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-cloud-arrow-down-fill" viewBox="0 0 16 16"><path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zm2.354 6.854-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5a.5.5 0 0 1 1 0v3.793l1.146-1.147a.5.5 0 0 1 .708.708z"/></svg>
                            <span>${CONFIG.updateButtonText}</span>
                        </button>
                    </div>
                    <div class="settings-panel" id="mobile-input-panel" style="display: none;">
                        <label>شماره موبایل برای دریافت SMS را وارد کنید:</label>
                        <div class="settings-input-group">
                             <input type="text" id="mobile-number-input" class="styled-input" value="${mobileNumber}" />
                             <button class="action-btn secondary-btn" id="save-mobile-btn">${CONFIG.saveMobileButtonText}</button>
                        </div>
                    </div>
                    <div class="solver-options-panel">
                        <label class="panel-label">انتخاب حل‌کننده کپچا:</label>
                        <div class="settings-options" id="captcha-solver-settings">
                            <label><input type="radio" name="captcha-solver-option" value="solver-none"> غیرفعال</label>
                            <label><input type="radio" name="captcha-solver-option" value="solver-1"> عمومی</label>
                            <label><input type="radio" name="captcha-solver-option" value="solver-2"> شخصی</label>
                        </div>
                    </div>
                </section>
                <section class="popup-section initial-search-section">
                    <h3 class="section-title">۱. جستجوی خودرو</h3>
                    <div class="search-input-group">
                        <input type="text" id="model-search-input-popup" class="styled-input" placeholder="${CONFIG.popupSearchPlaceholder}" />
                        <button class="action-btn primary-btn" id="start-search-btn-popup">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16"><path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/></svg>
                           <span>${CONFIG.startContinuousSearchText}</span>
                        </button>
                    </div>
                </section>
                <section class="popup-section search-results-section" style="display: none;">
                    <h3 class="section-title">۲. محصول پیدا شده</h3>
                    <div class="items-grid" id="search-items-grid-popup"></div>
                </section>
                <div class="captcha-sms-messages-container" style="display: none;">
                    <section class="popup-section captcha-sms-box">
                      <h3 class="section-title">۳. کپچا و کد SMS</h3>
                        <div class="captcha-image-container" id="captcha-image-display-popup"></div>
                        <input type="text" id="captcha-input-field-popup" class="styled-input captcha-input" placeholder="کد امنیتی (کپچا)" />
                        <div class="sms-input-group">
                            <input type="text" id="sms-input-field-popup" class="styled-input sms-input" placeholder="کد SMS" />
                            <button class="action-btn secondary-btn sms-btn" id="get-sms-code-btn-popup">${CONFIG.manualSmsButtonText}</button>
                        </div>
                        <button class="action-btn primary-btn submit-order-btn" id="submit-order-btn-popup" disabled>ثبت نهایی سفارش</button>
                    </section>
                    <section class="popup-section messages-box">
                        <h3 class="section-title">پیام‌های سیستم</h3>
                        <div class="messages-content" id="system-messages-content-popup"><p class="no-message-exist"></p></div>
                    </section>
                </div>
            </div>
        </div>`;
        document.body.appendChild(popup);
        uiElements = {
            mainPopup: popup,
            initialSearchSection: popup.querySelector('.initial-search-section'),
            modelSearchInput: document.getElementById('model-search-input-popup'),
            startSearchButton: document.getElementById('start-search-btn-popup'),
            closeMainPopupButton: popup.querySelector('.popup-close-btn'),
            liveClock: document.getElementById('live-clock'),
            userDisplayName: document.getElementById('user-display-name'),
            searchResultsSection: popup.querySelector('.search-results-section'),
            itemsGrid: document.getElementById('search-items-grid-popup'),
            captchaSmsContainer: popup.querySelector('.captcha-sms-messages-container'),
            systemMessagesContent: document.getElementById('system-messages-content-popup'),
            captchaImageDisplay: document.getElementById('captcha-image-display-popup'),
            captchaInput: document.getElementById('captcha-input-field-popup'),
            smsInput: document.getElementById('sms-input-field-popup'),
            getSmsCodeButton: document.getElementById('get-sms-code-btn-popup'),
            submitOrderButton: document.getElementById('submit-order-btn-popup'),
            noMessagePlaceholder: popup.querySelector('.no-message-exist'),
            // NEW UI Elements for settings
            toggleMobilePanelButton: document.getElementById('toggle-mobile-panel-btn'),
            mobileInputPanel: document.getElementById('mobile-input-panel'),
            mobileNumberInput: document.getElementById('mobile-number-input'),
            saveMobileButton: document.getElementById('save-mobile-btn'),
            updateButton: document.getElementById('check-update-btn'),
        };
        uiElements.startSearchButton.addEventListener('click', toggleContinuousProductSearch);
        uiElements.getSmsCodeButton.addEventListener('click', handleManualSmsRequest);
        uiElements.submitOrderButton.addEventListener('click', handleSubmitOrder);
        uiElements.closeMainPopupButton.addEventListener('click', () => { uiElements.mainPopup.style.display = 'none'; resetPopupUI(); });
        uiElements.updateButton.addEventListener('click', handleUpdateCheck);
        window.addEventListener('keydown', (e) => { if (e.key === 'Escape' && uiElements.mainPopup.style.display === 'flex') { uiElements.closeMainPopupButton.click(); } });
        uiElements.captchaInput.addEventListener('input', checkAndEnableSubmitButton);
        uiElements.smsInput.addEventListener('input', checkAndEnableSubmitButton);

        // NEW: Event listener for the toggle button
        uiElements.toggleMobilePanelButton.addEventListener('click', () => {
            const panel = uiElements.mobileInputPanel;
            if (panel.style.display === 'none') {
                panel.style.display = 'block';
            } else {
                panel.style.display = 'none';
            }
        });

        uiElements.saveMobileButton.addEventListener('click', () => {
            const newNumber = uiElements.mobileNumberInput.value.trim();
            if (newNumber && /^[0-9]{11}$/.test(newNumber)) {
                mobileNumber = newNumber;
                GM_setValue('savedMobileNumber', mobileNumber);
                uiElements.userDisplayName.textContent = mobileNumber;
                displayMessage(`شماره موبایل به ${mobileNumber} تغییر یافت و ذخیره شد.`, 'success');
                resetPopupUI(); // Reset to hide the panel after saving
            } else {
                displayMessage('لطفاً یک شماره موبایل ۱۱ رقمی صحیح وارد کنید.', 'error');
            }
        });

        const solverRadios = popup.querySelectorAll('input[name="captcha-solver-option"]');
        solverRadios.forEach(radio => {
            if (radio.value === selectedSolver) {
                radio.checked = true;
            }
            radio.addEventListener('change', (e) => {
                selectedSolver = e.target.value;
                GM_setValue('selectedSolver', selectedSolver);
                const friendlyName = e.target.parentElement.textContent.trim();
                log('info', `تنظیمات حل‌کننده به: ${friendlyName} تغییر یافت.`);
                displayMessage(`حل‌کننده کپچا به ${friendlyName} تغییر یافت.`, 'success');
            });
        });

        resetPopupUI();
    }
    function checkAndEnableSubmitButton() {
        if(uiElements.captchaInput&&uiElements.smsInput&&uiElements.submitOrderButton){const cf=uiElements.captchaInput.value.trim().length > 0;
        const sf=uiElements.smsInput.value.trim().length > 0;
        uiElements.submitOrderButton.disabled=!(cf&&sf);}}

    async function tryAutoSubmit() {
        if (currentOrderData.isSubmittingOrderProcess) return;
        const capFilled = currentOrderData.captchaAutoFilled && uiElements.captchaInput.value.trim() !== '';
        const smsFilled = currentOrderData.smsAutoFilled && uiElements.smsInput.value.trim() !== '';
        if (capFilled && smsFilled) {
            log('info', 'کپچا و SMS خودکار پر شد. شروع ثبت خودکار...');
            await handleSubmitOrder();
        }
    }
    function displayMessage(text, type = 'info') {
        if(!uiElements.systemMessagesContent)return;
        const noMsg = uiElements.systemMessagesContent.querySelector('.no-message-exist');
        if(noMsg) noMsg.style.display='none';
        const md=document.createElement('div');md.className=`message ${type}`;md.innerHTML=`<span class="msg-text">${text}</span>`;uiElements.systemMessagesContent.prepend(md);}
    function updateClockDisplay() {
        if(!uiElements.liveClock)return;const n=new Date();uiElements.liveClock.textContent=`${n.getHours().toString().padStart(2,'0')}:${n.getMinutes().toString().padStart(2,'0')}`;
    }
    function displayFoundItem(project) {
        uiElements.itemsGrid.innerHTML = '';
        const card = document.createElement('div');
        card.className = 'product-card';
        const imageUrl = `https://esale.ikd.ir/images/${project.ModelCode}.jpg`;
        const placeholderUrl = `https://placehold.co/600x400/2b4157/f8f9fa?text=${encodeURIComponent(project.KhodroTitle)}`;
        card.innerHTML = `
            <div class="product-image-container">
                <img src="${imageUrl}" alt="تصویر ${project.KhodroTitle}" onerror="this.onerror=null;this.src='${placeholderUrl}';">
            </div>
            <div class="product-details">
                <h4 class="product-title">${project.KhodroTitle}</h4>
                 <p class="product-model">${project.Title}</p>
                 <div class="product-price">
                    <span>قیمت نهایی:</span>
                    <span class="price-value">${project.InternetPrice?.toLocaleString('fa-IR') || 'N/A'} ریال</span>
                </div>
            </div>
        `;
        uiElements.itemsGrid.appendChild(card);
        uiElements.initialSearchSection.style.display = 'none';
        uiElements.searchResultsSection.style.display = 'block';
        uiElements.captchaSmsContainer.style.display = 'flex';
    }
    function displayCaptcha(captchaData) {
        uiElements.captchaImageDisplay.innerHTML = '';
        if (captchaData.capchaData) {
            uiElements.captchaImageDisplay.innerHTML = captchaData.capchaData;
        } else if (captchaData.dataImage) {
            uiElements.captchaImageDisplay.innerHTML = `<img src="data:image/png;base64,${captchaData.dataImage}" alt="تصویر کپچا">`;
        } else {
            return { error: "داده‌ای برای کپچا از API دریافت نشد." };
        }
        return { error: null };
    }

    // =====================================================================================
    // --- 🔄 MAIN APPLICATION LOGIC & CYCLES ---
    // =====================================================================================
    async function pollSmsFromRelay() {
        if (currentOrderData.stopProcess || !currentOrderData.selectedProject) return;
        const smsResult = await getLastSmsFromRelayServer();
        if (smsResult.success && smsResult.sms) {
            log('success', `کد SMS از سرور واسط دریافت شد: ${smsResult.sms}`);
            displayMessage(`کد SMS دریافت شد: ${smsResult.sms}`, 'success');
            stopSmsRelayPolling();
            currentOrderData.smsCode = smsResult.sms;
            currentOrderData.smsAutoFilled = true;
            uiElements.smsInput.value = smsResult.sms;
            checkAndEnableSubmitButton();
            await tryAutoSubmit();
        }
    }

    function startSmsRelayPolling() {
        stopSmsRelayPolling();
        log('info', `شروع پولینگ SMS...`);
        const pollLoop = async () => {
             if (currentOrderData.stopProcess || currentOrderData.smsAutoFilled) {
                stopSmsRelayPolling();
                return;
            }
            await pollSmsFromRelay();
            if (!currentOrderData.stopProcess && !currentOrderData.smsAutoFilled) {
                smsRelayPollingTimeoutId = setTimeout(pollLoop, CONFIG.smsRelayPollingIntervalMs);
            }
        };
        pollLoop();
    }
    function stopSmsRelayPolling() {
        if (smsRelayPollingTimeoutId) {
            clearTimeout(smsRelayPollingTimeoutId);
            smsRelayPollingTimeoutId = null;
            log('info', 'پولینگ SMS متوقف شد.');
        }
    }

    async function fetchAndHandleCaptcha() {
        if (currentOrderData.stopProcess || !currentOrderData.selectedProject) {
            return false;
        }

        displayMessage('در حال دریافت کپچای جدید...', 'info');
        const captchaApiResponse = await getCaptchaOrderFromIKD(currentOrderData.selectedProject.IdDueDeliverProg);
        if (!captchaApiResponse.success) {
            displayMessage(`خطا در دریافت کپچا: ${captchaApiResponse.error}`, 'error');
            return false;
        }
        displayCaptcha(captchaApiResponse.data);

        if (selectedSolver === 'solver-none') {
            displayMessage('حل خودکار کپچا غیرفعال است. لطفاً دستی وارد کنید.', 'warn');
            currentOrderData.captchaAutoFilled = false;
            return true;
        }

        const solveResponse = await solveCaptcha(captchaApiResponse.data);
        if (solveResponse.success && solveResponse.answer) {
            displayMessage('کپچای جدید به طور خودکار حل شد.', 'success');
            currentOrderData.captchaCode = solveResponse.answer;
            currentOrderData.captchaAutoFilled = true;
            uiElements.captchaInput.value = solveResponse.answer;
            checkAndEnableSubmitButton();
            tryAutoSubmit();
            return true;
        } else {
            currentOrderData.captchaAutoFilled = false;
            displayMessage(`حل خودکار کپچا ناموفق بود: ${solveResponse.error}`, 'warn');
            return false;
        }
    }

    async function requestAndHandleSms(isManualRequest = false) {
        if (isManualRequest && uiElements.getSmsCodeButton.disabled) {
            return false;
        }
        displayMessage(`در حال ارسال درخواست SMS...`, 'info');
        if (isManualRequest) uiElements.getSmsCodeButton.disabled = true;

        startSmsRelayPolling();

        const smsResponse = await requestSmsFromIKD();

        if (!smsResponse.success) {
            displayMessage(`ارسال درخواست SMS ناموفق: ${smsResponse.error}.`, 'error');
            if (smsResponse.isCooldown) {
                startManualSmsCooldownTimer(Math.ceil(smsResponse.timeLeftMs / 1000));
                displayMessage('محدودیت زمانی SMS فعال است. ربات همچنان کد را از سرور می‌خواند.', 'warn');
            }
            else if(isManualRequest) {
                uiElements.getSmsCodeButton.disabled = false;
            }
            return false; // Return failure to allow the main loop to restart
        } else {
            displayMessage('درخواست SMS با موفقیت به ایران‌خودرو ارسال شد.', 'success');
            if(isManualRequest) startManualSmsCooldownTimer();
            return true; // Return success
        }
    }

    async function startOrderProcess() {
        if (currentOrderData.stopProcess || !currentOrderData.selectedProject || currentOrderData.isSubmittingOrderProcess) return;

        try {
            log('info', 'شروع فرآیند اصلی...');
            currentOrderData.captchaAutoFilled = false;
            currentOrderData.smsAutoFilled = false;
            currentOrderData.orderDetails = null;
            if (uiElements.captchaInput) uiElements.captchaInput.value = '';
            if (uiElements.smsInput) uiElements.smsInput.value = '';
            checkAndEnableSubmitButton();

            const orderDetailsResult = await getOrderDetailsFromIKD(currentOrderData.selectedProject);
            if (!orderDetailsResult.success) {
                displayMessage(`خطا در دریافت اطلاعات سفارش: ${orderDetailsResult.error}. تلاش مجدد...`, 'error');
                setTimeout(startOrderProcess, CONFIG.apiRetryDelayMs);
                return;
            }
            currentOrderData.orderDetails = orderDetailsResult.data;
            log('success', 'اطلاعات اولیه سفارش با موفقیت دریافت شد.');

            const captchaSuccess = await fetchAndHandleCaptcha();
            if (!captchaSuccess) {
                log('warn', 'مرحله کپچا ناموفق بود. فرآیند مجدداً آغاز می‌شود.');
                setTimeout(startOrderProcess, CONFIG.apiRetryDelayMs);
                return;
            }

            const smsSuccess = await requestAndHandleSms(false);
            if (!smsSuccess) {
                log('warn', 'مرحله درخواست SMS ناموفق بود. فرآیند برای تلاش مجدد از ابتدا آغاز می‌شود.');
                setTimeout(startOrderProcess, CONFIG.apiRetryDelayMs);
                return;
            }

        } catch (e) {
            log('error', 'یک خطای پیش‌بینی نشده در فرآیند اصلی رخ داد. ربات مجددا تلاش خواهد کرد.', e);
            displayMessage(`یک خطای غیرمنتظره رخ داد: ${e.message}. شروع مجدد...`, 'error');
            setTimeout(startOrderProcess, CONFIG.apiRetryDelayMs);
        }
    }

    function stopMainProcess() {
        currentOrderData.stopProcess = true;
        stopSmsRelayPolling();
        if (mainProcessTimeoutId) clearTimeout(mainProcessTimeoutId);
    }

    async function performContinuousProductSearchStep(searchTerm) {
        if (!isContinuousSearchingProduct) return;
        try {
            const projectsResponse = await getSaleProjectsFromIKD();
            if (!isContinuousSearchingProduct) return;
            if (projectsResponse.success && projectsResponse.data?.saleProjects?.length > 0) {
                const saleProjects = projectsResponse.data.saleProjects;
                const foundProject = saleProjects.find(p => (p.KhodroTitle + " " + p.Title).toLowerCase().includes(searchTerm.toLowerCase()));
                if (foundProject) {
                    log('success', `محصول "${foundProject.KhodroTitle}" پیدا شد!`);
                    stopContinuousProductSearch();
                    currentOrderData.selectedProject = foundProject;
                    displayMessage(`محصول "${foundProject.KhodroTitle}" پیدا و انتخاب شد.`, 'success');
                    displayFoundItem(foundProject);
                    currentOrderData.stopProcess = false;
                    startOrderProcess();
                } else {
                    displayMessage(`محصول "${searchTerm}" هنوز یافت نشد.`, 'info');
                }
            } else if (projectsResponse.error) {
                displayMessage(`خطا در دریافت لیست محصولات: ${projectsResponse.error}.`, 'warn');
            } else {
                displayMessage(`لیست محصولات خالی است.`, 'info');
            }
        } catch (e) {
            log('error', 'خطا در حلقه جستجوی محصول.', e);
        }
    }


    function startContinuousProductSearch() {
        const st=uiElements.modelSearchInput.value.trim();if(!st){displayMessage('مدل را وارد کنید.','warn');return;}
        if(isContinuousSearchingProduct)return;
        isContinuousSearchingProduct=true;
        uiElements.startSearchButton.textContent=CONFIG.stopContinuousSearchText;
        uiElements.modelSearchInput.disabled=true;
        displayMessage(`جستجوی مستمر برای "${st}" آغاز شد...`,'info');

        const searchLoop = async () => {
            if (!isContinuousSearchingProduct) return;
            await performContinuousProductSearchStep(st);
            if (isContinuousSearchingProduct) {
                productSearchPollingTimeoutId = setTimeout(searchLoop, CONFIG.searchPollingIntervalMs);
            }
        };
        searchLoop();
    }
    function stopContinuousProductSearch() {
        if(productSearchPollingTimeoutId){clearTimeout(productSearchPollingTimeoutId);productSearchPollingTimeoutId=null;}
        isContinuousSearchingProduct=false;
        if(uiElements.startSearchButton){uiElements.startSearchButton.textContent=CONFIG.startContinuousSearchText;uiElements.startSearchButton.disabled=false;}
        if(uiElements.modelSearchInput)uiElements.modelSearchInput.disabled=false;
        log('info','جستجوی محصول متوقف شد.');
    }
    function toggleContinuousProductSearch() {
        if (isContinuousSearchingProduct) stopContinuousProductSearch();
        else startContinuousProductSearch();
    }

    function startManualSmsCooldownTimer(totalSeconds) {
        let timeLeft = totalSeconds;
        if (smsCooldownInterval) clearInterval(smsCooldownInterval);
        const updateTimer = () => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            if (uiElements.getSmsCodeButton) {
                uiElements.getSmsCodeButton.textContent = CONFIG.manualSmsCooldownText.replace('{timeLeft}', `${minutes}:${seconds.toString().padStart(2, '0')}`);
                uiElements.getSmsCodeButton.disabled = true;
            }
            if (timeLeft-- <= 0) {
                clearInterval(smsCooldownInterval);
                if (uiElements.getSmsCodeButton) {
                    uiElements.getSmsCodeButton.textContent = CONFIG.manualSmsButtonText;
                    uiElements.getSmsCodeButton.disabled = false;
                }
            }
        };
        updateTimer();
        smsCooldownInterval = setInterval(updateTimer, 1000);
    }

    function checkSmsCooldownOnLoad() {
        if (smsCooldownInterval) clearInterval(smsCooldownInterval);
        const lastSmsTime = parseInt(localStorage.getItem(CONFIG.smsTimestampKey) || '0');
        const now = Date.now();
        const cooldownMs = CONFIG.smsCooldownMinutes * 60 * 1000;
        const timePassed = now - lastSmsTime;

        if (timePassed < cooldownMs) {
            const remainingSeconds = Math.ceil((cooldownMs - timePassed) / 1000);
            startManualSmsCooldownTimer(remainingSeconds);
            return false;
        } else {
             if (uiElements.getSmsCodeButton) {
                uiElements.getSmsCodeButton.textContent = CONFIG.manualSmsButtonText;
                uiElements.getSmsCodeButton.disabled = false;
            }
            return true;
        }
    }
    async function handleManualSmsRequest() {
        if(!currentOrderData.selectedProject){displayMessage('ابتدا محصول باید انتخاب شود.','warn');return;}if(!checkSmsCooldownOnLoad()){displayMessage('لطفاً تا پایان شمارش معکوس صبر کنید.','warn');return;}
        await requestAndHandleSms(true);}

    async function handleSubmitOrder() {
        if (currentOrderData.isSubmittingOrderProcess) { return;
        }
        currentOrderData.isSubmittingOrderProcess = true;
        stopMainProcess();
        if (uiElements.submitOrderButton) {
            uiElements.submitOrderButton.disabled = true;
            uiElements.submitOrderButton.textContent = `در حال ثبت...`;
        }

        const captchaCode = uiElements.captchaInput.value.trim();
        const smsCode = uiElements.smsInput.value.trim();

        if (!captchaCode || !smsCode) {
            displayMessage('کپچا و کد SMS هر دو باید پر شوند.', 'error');
            currentOrderData.isSubmittingOrderProcess = false;
            checkAndEnableSubmitButton();
            return;
        }
        currentOrderData.captchaCode = captchaCode;
        currentOrderData.smsCode = smsCode;
        if (!currentOrderData.selectedProject || !currentOrderData.captchaToken) { displayMessage('اطلاعات سفارش ناقص است.', 'error'); resetPopupUI();
        currentOrderData.isSubmittingOrderProcess = false; return;
        }

        if (!currentOrderData.orderDetails) {
            displayMessage('اطلاعات سفارش یافت نشد! فرآیند مجدداً آغاز می‌شود.', 'error');
            currentOrderData.isSubmittingOrderProcess = false;
            startOrderProcess();
            return;
        }

        const finalOrderDetails = currentOrderData.orderDetails;
        const orderPayload = { agency: finalOrderDetails.agency, agencyId: parseInt(finalOrderDetails.agencyId), agencyShow: 2, captchaText: currentOrderData.captchaCode, captchaToken: currentOrderData.captchaToken, idBank: 23, idBaseColor: parseInt(finalOrderDetails.selectedColor), idBaseUsage: parseInt(finalOrderDetails.selectedUsage), quantity: 1, responDoc: true, idDueDeliverProg: parseInt(currentOrderData.selectedProject.IdDueDeliverProg), smsKey: currentOrderData.smsCode, valueId: generateUUID(), };
        const addOrderResponse = await addOrderToIKD(orderPayload);

        if (addOrderResponse.success) {
            displayMessage('سفارش با موفقیت ثبت و به بانک هدایت می‌شوید.', 'success');
            stopMainProcess();
        } else {
            displayMessage(`ثبت نهایی ناموفق: ${addOrderResponse.error}.`, 'error');
            log('error', 'ثبت نهایی ناموفق بود. پاسخ سرور:', addOrderResponse);
            log('warn', `کپچای ارسال شده: ${captchaCode}, کد پیامک ارسال شده: ${smsCode}. فرآیند مجدداً آغاز می‌شود.`);
            displayMessage(`فرآیند تا ${CONFIG.failedSubmitDelayMs / 1000} ثانیه دیگر به صورت خودکار مجدداً آغاز می‌شود...`, 'info');
            currentOrderData.isSubmittingOrderProcess = false;
            currentOrderData.stopProcess = false;
            setTimeout(() => {
                startOrderProcess();
            }, CONFIG.failedSubmitDelayMs);
        }
    }

    async function handleUpdateCheck() {
        const SCRIPT_URL = 'https://gist.github.com/masoudes72/0924b68b124266aa1eefd37070eb3a31/raw/1cbc6a86b055dcd8fd0f60f1c9c185301bf175f1/ikd-bot.user.js';
        displayMessage('درحال باز کردن صفحه نصب/به‌روزرسانی...', 'info');
        uiElements.updateButton.disabled = true;
        try {
            window.open(SCRIPT_URL, '_blank');
            await sleep(1000);
            displayMessage('اگر نسخه جدیدی موجود باشد، صفحه نصب باز می‌شود.', 'success');
        } catch (error) {
            log('error', 'خطا در باز کردن لینک به‌روزرسانی.', error);
            displayMessage('خطا در باز کردن لینک به‌روزرسانی. لطفاً پاپ‌آپ‌ها را فعال کنید.', 'error');
        } finally {
            uiElements.updateButton.disabled = false;
        }
    }

    // =====================================================================================
    // --- � SCRIPT INITIALIZATION & ENTRY POINT ---
    // =====================================================================================
    function ensureUIExists() {
        if (!document.getElementById('ikd-bot-trigger-btn')) { createTriggerButton();
        }
        if (!document.getElementById('ikd-main-process-popup')) { createMainPopupUI();
        }
    }

    function initializeScript() {
        log('info', `Script initializing (v3.7.0 Unified Settings).`);
        selectedSolver = GM_getValue('selectedSolver', 'solver-2');
        mobileNumber = GM_getValue('savedMobileNumber', CONFIG.defaultMobileNumber);
        log('info', `حل‌کننده کپچای انتخاب شده: ${selectedSolver}`);
        log('info', `شماره موبایل بارگذاری شده: ${mobileNumber}`);

        if (typeof localStorage !== 'undefined') {
            authToken = localStorage.getItem(CONFIG.localStorageTokenKey);
            if (!authToken) {
                log('error', `توکن "${CONFIG.localStorageTokenKey}" یافت نشد. لطفاً ابتدا در سایت لاگین کنید و سپس صفحه را رفرش نمایید.`);
                alert(`توکن لاگین یافت نشد. لطفاً ابتدا در سایت https://esale.ikd.ir لاگین کنید و سپس صفحه را رفرش نمایید.`);
                return;
            }
        } else {
            log('error', 'localStorage is not supported.');
            return;
        }
        applyStyles();
        createMainPopupUI();
        createTriggerButton();
        updateClockDisplay();
        setInterval(updateClockDisplay, 1000 * 30);
        setInterval(ensureUIExists, 2000);
        log('info', 'اسکریپت مقداردهی اولیه شد و UI در حال پایش است.');
    }

    function applyStyles() {
        GM_addStyle(`
            :root{--theme-primary:#f4a261;--theme-secondary:#2b4157;--theme-dark-gray:#212529;--theme-light-gray:#e0e0e0;--theme-text-light:#f8f9fa;--theme-text-dark:#212529;--success-bg:rgba(40,200,130,.1);--success-text:rgba(200,255,220,.9);--success-border: #2c8;--error-bg:rgba(255,60,60,.1);--error-text:rgba(255,200,200,.9);--error-border:#f44;--warn-bg:rgba(255,170,0,.1);--warn-text:rgba(255,220,180,.9);--warn-border:#fa0;--font-family:'IRANSans','Tahoma',sans-serif;--border-radius-sm:0.3rem;--border-radius-md:0.5rem;--box-shadow:0 .5rem 1rem rgba(0,0,0,.15)}
            body{font-family:var(--font-family)}
            #ikd-bot-trigger-btn{position:fixed;bottom:25px;right:25px;padding:12px 22px;background-color:var(--theme-primary);color:var(--theme-text-light);border:none;border-radius:var(--border-radius-md);box-shadow:var(--box-shadow);font-size:16px;font-weight:500;cursor:pointer;z-index:9999;transition:background-color .2s ease,transform .2s ease}
            #ikd-bot-trigger-btn:hover{background-color:#e08a4c;transform:translateY(-2px)}
            .popup{position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,.7);display:none;justify-content:center;align-items:center;z-index:10001;padding:20px;backdrop-filter:blur(3px);direction:rtl}
            .popup-content-wrapper{background-color:var(--theme-secondary);color:var(--theme-text-light);border-radius:var(--border-radius-md);width:100%;max-width:900px;max-height:95vh;box-shadow:0 1rem 3rem rgba(0,0,0,.3);display:flex;flex-direction:column;overflow:hidden;border:1px solid rgba(255,255,255,0.1)}
            .popup-header{background:linear-gradient(135deg, rgba(43,65,87,1) 0%, rgba(30,45,60,1) 100%);padding:1rem 1.5rem;display:flex;justify-content:space-between;align-items:center;border-bottom:1px solid rgba(255,255,255,0.1); flex-wrap: wrap;}
            .popup-header-left { display: flex; align-items: center; gap: 15px; }
            .popup-header-right { display: flex; align-items: center; gap: 20px; }
            .popup-logo{height:40px;filter: drop-shadow(0 0 5px rgba(244,162,97,0.5));}
            .popup-title { font-size: 1.25rem; font-weight: 500; margin: 0; color: #fff; }
            .header-info-item { display: flex; align-items: center; gap: 8px; font-size: 0.85rem; color: var(--theme-light-gray); }
            .header-info-item svg { color: var(--theme-primary); }
            .popup-clock{direction:ltr}
            .popup-close-btn{background:transparent;border:none;color:var(--theme-light-gray);font-size:28px;font-weight:700;cursor:pointer;padding:0 8px;line-height:1;transition:color .2s ease, transform .2s ease;}
            .popup-close-btn:hover{color:var(--theme-primary); transform: rotate(90deg);}
            .popup-main-content{padding:1.5rem;display:flex;flex-direction:column;gap:1.5rem;overflow-y:auto;flex-grow:1}
            .popup-section{background-color:rgba(255,255,255,.03);padding:1.25rem;border-radius:var(--border-radius-md); border: 1px solid rgba(255,255,255,0.08);}
            .section-title{margin:0 0 1rem;color:var(--theme-primary);border-bottom:1px solid rgba(255,255,255,.15);padding-bottom:10px;font-size:1.1rem;font-weight:500;}
            .search-input-group, .settings-input-group { display: flex; gap: 10px; }
            .styled-input{width:100%;padding:12px 15px;margin:0;border:1px solid rgba(255,255,255,.2);border-radius:var(--border-radius-sm);font-size:1rem;background-color:rgba(0,0,0,.25);color:var(--theme-text-light);transition:border-color .2s ease,box-shadow .2s ease}
            .styled-input::placeholder{color:rgba(255,255,255,.4)}
            .styled-input:focus{outline:0;border-color:var(--theme-primary);box-shadow:0 0 0 .2rem rgba(244,162,97,.3)}
            .action-btn{padding:12px 18px;font-size:1rem;font-weight:500;border-radius:var(--border-radius-sm);cursor:pointer;border:none;transition:all .2s ease;text-align:center;display:flex;align-items:center;justify-content:center;gap:8px;}
            .action-btn.primary-btn{background:linear-gradient(145deg, #f4a261, #e76f51);color:white; box-shadow: 0 4px 15px rgba(0,0,0,0.2);}
            .action-btn.primary-btn:hover{transform: translateY(-2px); box-shadow: 0 6px 20px rgba(0,0,0,0.3);}
            .action-btn.secondary-btn { background-color: #495057; color: var(--theme-text-light); }
            .action-btn.secondary-btn:hover { background-color: #5a6268; }
            .action-btn:disabled{background: #555c63 !important; color:#868e96!important;cursor:not-allowed;transform:none;box-shadow:none;}
            .items-grid .product-card{background-color:rgba(255,255,255,.05);border-radius:var(--border-radius-md);border:1px solid rgba(255,255,255,0.1);display:flex;flex-direction:column;overflow:hidden;transition:all .3s ease}
            .product-image-container{width:100%;height:200px;overflow:hidden;background-color:#212529}
            .product-image-container img{width:100%;height:100%;object-fit:cover;transition:transform .3s ease}
            .product-card:hover .product-image-container img{transform:scale(1.05)}
            .product-details{padding:1.5rem}
            .product-title{font-size:1.25rem;font-weight:500;color:var(--theme-primary);margin:0 0 .5rem}
            .product-model{font-size:.9rem;color:var(--theme-light-gray);margin:0 0 1rem;line-height:1.5}
            .product-price{display:flex;justify-content:space-between;align-items:center;background-color:rgba(0,0,0,.2);padding:.75rem 1rem;border-radius:var(--border-radius-sm);font-size:1.1rem;font-weight:500}
            .product-price .price-value{color:var(--theme-primary);font-weight: bold;}
            .captcha-sms-messages-container{display:none;gap:20px;align-items:flex-start}
            @media(min-width:768px){.captcha-sms-messages-container{flex-direction:row}.captcha-sms-box{flex:1.2}.messages-box{flex:.8}}
            .captcha-sms-box,.messages-box{min-width:0}
            .messages-content{max-height:280px;overflow-y:auto;padding-right:10px;scrollbar-width:thin;scrollbar-color:var(--theme-primary) rgba(255,255,255,.1)}
            .messages-content::-webkit-scrollbar{width:8px}
            .messages-content::-webkit-scrollbar-track{background:rgba(255,255,255,.05)}
            .messages-content::-webkit-scrollbar-thumb{background-color:var(--theme-primary);border-radius:4px}
            .message{padding:10px 12px;margin-bottom:8px;border-radius:var(--border-radius-sm);font-size:13px;display:flex;align-items:center;gap:10px;line-height:1.5; background-color: rgba(50,150,255,.1); color: rgba(200,220,255,.9); border-left: 4px solid #39f;}
            .message.success{background-color:rgba(40,200,130,.1);color:rgba(200,255,220,.9);border-left-color:#2c8;}
            .message.error{background-color:rgba(255,60,60,.1);color:rgba(255,200,200,.9);border-left-color:#f44;}
            .message.warn{background-color:rgba(255,170,0,.1);color:rgba(255,220,180,.9);border-left-color:#fa0;}
            .msg-text{flex-grow:1}
            .no-message-exist{color:rgba(255,255,255,.5);text-align:center;padding:15px 0;font-style:italic}
            .captcha-image-container{text-align:center;margin-bottom:15px;background-color:#fff;padding:10px;border-radius:var(--border-radius-sm);border:1px solid rgba(255,255,255,.1);min-height:60px;display:flex;justify-content:center;align-items:center}
            .captcha-image-container img,.captcha-image-container svg{max-width:230px;height:auto;display:inline-block}
            .sms-input-group{display:flex;gap:10px;align-items:center;margin-bottom:15px}
            .sms-input-group .styled-input{margin-bottom:0;flex-grow:1; width: auto;}
            .sms-btn{padding:12px 15px;flex-shrink:0; width: auto;}
            .submit-order-btn{margin-top:10px; font-size: 1.1rem; padding: 15px;}
            /* UPDATED Styles for settings layout */
            .settings-section { background-color: rgba(0,0,0,0.2); }
            .main-settings-controls { display: flex; gap: 10px; }
            .main-settings-controls .action-btn { flex-grow: 1; }
            .settings-panel { background-color: rgba(0,0,0,0.2); padding: 1rem; border-radius: var(--border-radius-sm); margin-top: 1rem; border: 1px solid rgba(255,255,255,0.1); transition: all 0.3s ease; }
            .settings-panel label { display: block; margin-bottom: 0.5rem; font-size: 0.9rem; color: var(--theme-light-gray); }
            .solver-options-panel { margin-top: 1rem; padding: 1rem; background-color: rgba(0,0,0,0.2); border-radius: var(--border-radius-sm); border: 1px solid rgba(255,255,255,0.1); }
            .panel-label { display: block; margin-bottom: 0.75rem; font-size: 0.9rem; font-weight: 500; color: var(--theme-light-gray); }
            .settings-options { display: flex; justify-content: space-around; }
            .settings-options label { display: flex; align-items: center; gap: 8px; cursor: pointer; color: var(--theme-light-gray); font-size: 0.9rem; }
            .settings-options input[type="radio"] { accent-color: var(--theme-primary); }
            @media(max-width:767px){.captcha-sms-messages-container{flex-direction:column}.popup-header{padding:10px 15px; flex-direction: column; align-items: flex-start; gap: 10px;}.popup-main-content{padding:15px;gap:15px}.popup-section{padding:15px}.section-title{font-size:17px;margin-bottom:12px}.items-grid .item h4{font-size:16px}.items-grid .item p{font-size:13px}.message{font-size:12px}}
        `);
    }

    // --- Script Entry Point ---
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeScript);
    } else {
        initializeScript();
    }

})();